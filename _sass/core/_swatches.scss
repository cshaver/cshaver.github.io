// default empty swatches
// set these with swatch-add, swatch-add-theme
$-swatches: (
  default: (
  ),
);

// adds a theme map to swatches map
// theme is a theme name
@function swatch-add-theme($theme) {
  @if map-has-key($-swatches, $theme) {
    @error "`#{$theme}` already exists in $-swatches!";
  }
  @else {
    $-swatches: map-set($-swatches, $theme, ()) !global;
  }
  @return null;
}

// adds swatch to swatches map, or overrides existing swatch based on $replace
@function swatch-set($name, $color, $theme: default, $replace: true) {
  @if map-has-key($-swatches, $theme) {
    $swatch-theme: map-get($-swatches, $theme);
    @if map-has-key($swatch-theme, $color) and not $replace {
      @error "`#{$color}` already exists in `#{$theme}` theme or default theme";
    }
    @else {
      $new-theme-map: map-set($swatch-theme, $name, $color);
      $-swatches: map-set($-swatches, $theme, $new-theme-map) !global;
    }
  }
  @else {
    @error "`#{$theme}` does not exist";
  }
  @return null;
}

// adds swatch to swatches map
// does not allow overriding existing swatches
@function swatch-add($name, $color, $theme: default) {
  @return swatch-set($name, $color, $theme, false);
}

// returns swatch from swatch map maptching theme
@function swatch-get($color, $theme: default) {
  @if map-has-key($-swatches, $theme) {
    $swatch-theme: map-get($-swatches, $theme);
    @if map-has-key($swatch-theme, $color) {
      @return map-get($swatch-theme, $color);
    }
    @else if map-has-key(map-get($-swatches, default), $color) {
      @return map-get(map-get($-swatches, default), $color);
    }
    @else {
      @error "`#{$color}` does not exist in `#{$theme}` theme or default theme";
    }
  }
  @else {
    @error "`#{$theme}` does not exist";
  }
}

// sugary wrapper on swatch-get
@function swatch($color, $theme: default) {
  @return swatch-get($color, $theme);
}
